"use strict";

/**
 * Main class.
 */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FireJS = function () {
	/**
 * Setup of object.
 */
	function FireJS() {
		_classCallCheck(this, FireJS);

		this.datalist = {};

		// to test whether we have singleton or not
		this.time = new Date();

		return this.instance;
	}

	/**
 * Execute the callback function when the page is loaded.
  * @param callback
 */


	_createClass(FireJS, [{
		key: "ready",
		value: function ready(callback) {
			if (callback && typeof callback === "function") {
				document.addEventListener("DOMContentLoaded", callback);
			}
		}

		/**
  * Get the HTML elements with CSS selector.
   * @param query CSS selector
   * @return FireElements
  */

	}, {
		key: "get",
		value: function get(query) {
			var res = document.querySelectorAll(query);
			var list = new FireElements();
			switch (res.length) {
				case 0:
					break;
				case 1:
					list.push(this.new(res[0]));
					break;
				default:
					[].forEach.call(res, function (e) {
						list.push(this.new(e));
					}, this);
			}
			return list;
		}

		/**
   * Create a FireElement from HTMLElement.
      * @param e HTMLElement
   */

	}, {
		key: "new",
		value: function _new(e) {
			if (!e || !(e instanceof HTMLElement)) {
				return null;
			}
			var el = e;
			if (el.firejs_id && this.datalist[el.firejs_id]) {
				// If element is known, it was loaded from datalist.
				return this.datalist[el.firejs_id];
			} else {
				var f = new FireElement(e, this);
				// Add to datalist elements.
				this.datalist[f.prop("firejs_id")] = f;
				return f;
			}
		}

		/**
   * Create new HTML element.
   * @param string name Tag HTML
   */

	}, {
		key: "create",
		value: function create(name) {
			return this.new(document.createElement(name));
		}

		/**
   * Run AJAX query.
   * @param data object
   * @param callback Function
   * @return Promise
   */

	}, {
		key: "ajax",
		value: function ajax(data, callback) {
			return new Promise(function (resolve, reject) {
				data.method = !data.method ? "GET" : data.method.toUpperCase();
				var xhr = new XMLHttpRequest();
				xhr.open(data.method, data.url);
				xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				var params = "";
				if (data.params && _typeof(data.params) === "object") {
					var params_list = [];
					for (var name in data.params) {
						switch (data.params[name]) {
							case true:
								data.params[name] = "1";break;
							case false:
								data.params[name] = "0";break;
							case null:
							case undefined:
							case NaN:
								data.params[name] = "";break;
						}
						params_list.push(name + "=" + encodeURIComponent(data.params[name]));
					}
					params = params_list.join("&");
				}
				xhr.onload = function () {
					var json_return = void 0;
					try {
						json_return = JSON.parse(xhr.response);
					} catch (e) {
						throw "Server return wrong JSON response";
					}
					new Promise(function (resolve, reject) {
						if (typeof callback === "function") {
							callback.call(xhr, json_return);
						}
						resolve();
					}).then(function () {
						resolve(json_return);
					});
				};
				xhr.onerror = function () {
					return reject(xhr.statusText);
				};
				xhr.send(params);
			});
		}

		/**
   * Observe object's value change and execute callback.
   * @param obj Object
   * @param prop String|Object|Function 
   * @param callback Function
   */

	}, {
		key: "watch",
		value: function watch(obj, prop, callback) {
			if (typeof prop === "function") {
				callback = prop;
				prop = Object.keys(obj);
			}
			if ((typeof prop === "undefined" ? "undefined" : _typeof(prop)) !== "object") {
				prop = [prop];
			}

			var _loop = function _loop(p) {
				var value = obj[p];
				Object.defineProperty(obj, p, {
					get: function get() {
						return value;
					},
					set: function set(v) {
						var old_value = value;
						value = v;
						callback(old_value, p);
					}
				});
			};

			var _iteratorNormalCompletion = true;
			var _didIteratorError = false;
			var _iteratorError = undefined;

			try {
				for (var _iterator = prop[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
					var p = _step.value;

					_loop(p);
				}
			} catch (err) {
				_didIteratorError = true;
				_iteratorError = err;
			} finally {
				try {
					if (!_iteratorNormalCompletion && _iterator.return) {
						_iterator.return();
					}
				} finally {
					if (_didIteratorError) {
						throw _iteratorError;
					}
				}
			}
		}
	}]);

	return FireJS;
}();

/**
 * Array class contains the FireElements and send to then the calls.
 */


var FireElements = function () {

	/**
  * Constructor.
  */
	function FireElements() {
		_classCallCheck(this, FireElements);

		// Contains FireElements.
		this.list = [];
	}

	/**
  * Get number of elements.
     * @return number
  */


	_createClass(FireElements, [{
		key: "size",
		value: function size() {
			return this.list.length;
		}

		/**
   * Add element to the list.
   * @param e FireElement
      * @return FireElements
   */

	}, {
		key: "push",
		value: function push(e) {
			this.list.push(e);
			return this;
		}

		/**
   * Walk the lsit of elements with callback.
   * @param callback Function
      * @return FireElements
   */

	}, {
		key: "each",
		value: function each(callback) {
			if (callback && typeof callback === "function") {
				this.list.forEach(function (e) {
					callback.call(e, e);
				});
			}
			return this;
		}

		/**
   * Get the parent element.
   * @return FireElements
   */

	}, {
		key: "parent",
		value: function parent() {
			var list = new FireElements();
			this.each(function (e) {
				if (e.parent()) {
					list.push(e.parent());
				}
			});
			return list.size() > 0 ? list : null;
		}

		/**
   * Get the parents.
   * @param string query
   * @return FireElements
   */

	}, {
		key: "parents",
		value: function parents(query) {
			var list = new FireElements();
			this.each(function (e) {
				e.parents(query).each(function (p) {
					list.push(p);
				});
			});
			return list;
		}

		/**
   * Get chidren element.
   * @return FireElements
   */

	}, {
		key: "children",
		value: function children() {
			var list = new FireElements();
			this.each(function (e) {
				e.children().each(function () {
					list.push(this);
				});
			});
			return list;
		}

		/**
   * Get clones elements.
   * @return FireElements
   */

	}, {
		key: "clone",
		value: function clone() {
			var list = new FireElements();
			this.each(function () {
				list.push(this.clone());
			});
			return list;
		}

		/**
   * Remove children.
   * @return FireElements
   */

	}, {
		key: "empty",
		value: function empty() {
			this.each(function () {
				this.empty();
			});
			return this;
		}

		/**
   * Remove selected elements.
   * @return null
   */

	}, {
		key: "remove",
		value: function remove() {
			this.each(function () {
				this.remove();
			});
			return null;
		}

		/**
   * Add element at the end.
   * @param e FireElement
   * @return FireElements
   */

	}, {
		key: "append",
		value: function append(e) {
			this.each(function (el) {
				if (e.each) {
					e.each(function (e) {
						el.append(e);
					});
				} else {
					el.append(e);
				}
			});
			return this;
		}

		/**
   * Add element at the begin.
   * @param e FireElement
   * @return FireElements
   */

	}, {
		key: "prepend",
		value: function prepend(e) {
			this.each(function (el) {
				if (e.each) {
					e.each(function (e) {
						el.prepend(e);
					});
				} else {
					el.prepend(e);
				}
			});
			return this;
		}

		/**
   * Set Text element.
   * @param string value
   * @return FireElements
   */

	}, {
		key: "text",
		value: function text(value) {
			if (typeof value !== "undefined") {
				this.each(function (e) {
					e.text(value);
				});
				return this;
			}
			return this.eq(0).text();
		}

		/**
   * Delete elements in the selected list.
   * @param elements FireElements
   * @return FireElements
   */

	}, {
		key: "not",
		value: function not(elements) {
			var _this = this;

			var list = new FireElements();

			var _loop2 = function _loop2(i) {
				var e = _this.eq(i);
				if (elements.node()) {
					if (elements.node() !== e.node()) {
						list.push(e);
					}
				} else {
					var find = false;
					elements.each(function (el) {
						if (el.node() === e.node()) {
							find = true;
						}
					});
					if (find === false) {
						list.push(e);
					}
				}
			};

			for (var i = 0; i < this.size(); i++) {
				_loop2(i);
			}
			return list;
		}

		/**
   * Get the next element.
   * @return FireElements
   */

	}, {
		key: "next",
		value: function next() {
			var list = new FireElements();
			this.each(function (e) {
				list.push(e.next());
			});
			return list;
		}

		/**
   * Get the previous element.
   * @return FireElements
   */

	}, {
		key: "prev",
		value: function prev() {
			var list = new FireElements();
			this.each(function (e) {
				list.push(e.prev());
			});
			return list;
		}

		/**
   * Find elements in children nodes.
   * @param query string
   * @return FireElements
   */

	}, {
		key: "find",
		value: function find(query) {
			var list = new FireElements();
			this.each(function (el) {
				el.find(query).each(function (e) {
					list.push(e);
				});
			});
			return list;
		}

		/**
   * Trigger a event.
   * @param event string
   * @param FireElements 
   */

	}, {
		key: "trigger",
		value: function trigger(event) {
			this.each(function (e) {
				e.trigger(event);
			});
			return this;
		}

		/**
   * Listen a event and execute the callback function when event triggering.
   * @param event string
   * @param callback Function
   * @return FireElements
   */

	}, {
		key: "on",
		value: function on(event, callback) {
			this.each(function (e) {
				e.on(event, callback);
			});
			return this;
		}

		/**
   * Unbind event listener.
   * @param event string
   * @return FireElements
   */

	}, {
		key: "off",
		value: function off(event) {
			this.each(function (e) {
				e.off(event);
			});
			return this;
		}

		/**
   * Check if the element has the class.
   * @param name string
   * @return boolean
   */

	}, {
		key: "hasClass",
		value: function hasClass(name) {
			var bool = true;
			this.each(function (e) {
				bool = bool && e.hasClass(name);
			});
			return bool;
		}

		/**
   * Add the class.
   * @param name string
   * @return FireElements
   */

	}, {
		key: "addClass",
		value: function addClass(name) {
			this.each(function (e) {
				e.addClass(name);
			});
			return this;
		}

		/**
   * Remove the class.
   * @param name string
   * @return FireElements
   */

	}, {
		key: "removeClass",
		value: function removeClass(name) {
			this.each(function (e) {
				e.removeClass(name);
			});
			return this;
		}

		/**
   * Toggle the class.
   * @param name string
   * @return FireElements
   */

	}, {
		key: "toggleClass",
		value: function toggleClass(name) {
			this.each(function (e) {
				e.toggleClass(name);
			});
			return this;
		}

		/**
   * Setter/getter of attribut the class.
   * @param name string
   * @param value string
   * @return FireElements
   */

	}, {
		key: "prop",
		value: function prop(name, value) {
			if (typeof value !== "undefined") {
				this.each(function (e) {
					e.prop(name, value);
				});
				return this;
			}
			return this.eq(0).prop(name);
		}

		/**
   * Setter/getter of attribut the class.
   * @param name string
   * @param value string
   * @return FireElements
   */

	}, {
		key: "attr",
		value: function attr(name, value) {
			if (typeof value !== "undefined") {
				this.each(function (e) {
					e.attr(name, value);
				});
				return this;
			}
			return this.eq(0).attr(name);
		}

		/**
   * Define CSS properties.
   * @param name string
   * @param value string
   * @return FireElements
   */

	}, {
		key: "css",
		value: function css(name, value) {
			console.log("parent", name, value);
			if (typeof value !== "undefined") {
				this.each(function (e) {
					e.css(name, value);
				});
				return this;
			}
			return this.eq(0).css(name);
		}

		/**
   * Define or not and get width element.
   * @param value number
   * @return number
   */

	}, {
		key: "width",
		value: function width(value) {
			if (value) {
				this.each(function (e) {
					e.width(value);
				});
			}
			return this.eq(0).width();
		}

		/**
   * Define or get height element.
   * @param value number
   * @return number
   */

	}, {
		key: "height",
		value: function height(value) {
			if (value) {
				this.each(function (e) {
					e.height(value);
				});
			}
			return this.eq(0).height();
		}

		/**
   * Get offset for top and left element in the page.
   * @return object {left, top}
   */

	}, {
		key: "offset",
		value: function offset() {
			if (this.eq(0)) {
				return this.eq(0).offset();
			}
			return null;
		}

		/**
   * Show the element with its saved display property.
   * @return FireElements
   */

	}, {
		key: "show",
		value: function show() {
			this.each(function (e) {
				e.show();
			});
			return this;
		}

		/**
   * Hide the element with display egals none.
   * @return FireElements
   */

	}, {
		key: "hide",
		value: function hide() {
			this.each(function (e) {
				e.hide();
			});
			return this;
		}

		/**
   * Toggle the visibility of element.
   * @return FireElements
   */

	}, {
		key: "toggle",
		value: function toggle() {
			this.each(function (e) {
				e.toggle();
			});
			return this;
		}

		/**
   * Get values of form elements.
   * @return string
   */

	}, {
		key: "val",
		value: function val(data) {
			if (typeof data !== "undefined") {
				this.each(function (e) {
					e.val(data);
				});
				return this;
			}
			if (this.eq(0)) {
				return this.eq(0).val();
			}
			return null;
		}

		/**
   * Return the nodes.
   * @return FireElements
   */

	}, {
		key: "node",
		value: function node() {
			var list = [];
			this.each(function (e) {
				list.push(e.node());
			});
			if (list.length === 1) {
				return list[0];
			}
			return list;
		}

		/**
   * Get contents of the first element.
   * @return string
   */

	}, {
		key: "html",
		value: function html(content) {
			if (typeof content !== "undefined") {
				this.each(function (e) {
					e.html(content);
				});
				return this;
			}
			if (this.eq(0)) {
				return this.eq(0).html();
			}
			return null;
		}

		/**
   * Return the specifique element with its index.
   * @param number index 
   * @return FireElement 
   */

	}, {
		key: "eq",
		value: function eq(index) {
			if (index < 0) {
				index = this.list.length + (index - 1);
			}
			return this.list[index];
		}

		/**
   * Return the first element.
   * @return FireElement 
   */

	}, {
		key: "first",
		value: function first() {
			return this.list[0];
		}

		/**
   * Return the last element.
   * @return FireElement 
   */

	}, {
		key: "last",
		value: function last() {
			return this.list[this.list.length - 1];
		}
	}]);

	return FireElements;
}();

/**
 * Overloading of HTMLElement.
 */


var FireElement = function () {
	/**
  * Setup of object.
  * @param e HTMLElement
  * @param firejs FireJS
  */
	function FireElement(e, firejs) {
		_classCallCheck(this, FireElement);

		// HTMLElement overloaded.	
		this.__element = e;

		// Store event listeners for off().	
		this.__handlers = [];

		// Library FireJS Factory for new FireElement.
		this.__firejs = firejs;

		// Save the display property for hide and show methods.
		this.__display = document.defaultView.getComputedStyle(this.node(), null).display.toLowerCase();
		this.__display_show = true;
		if (this.__display === "none") {
			this.__display_show = false;
		}

		this.node().firejs_id = Date.now().toString() + "-" + Math.random().toString().substring(2, 7);
	}

	/**
  * Get the property of HTMLElement.
  * @param name string
  */


	_createClass(FireElement, [{
		key: "prop",
		value: function prop(name, value) {
			if (typeof value !== "undefined") {
				if (value === null) {
					this.node()[name] = null;
				} else {
					this.node()[name] = value;
				}
				return this;
			}
			return this.node()[name];
		}

		/**
   * Get the parent.
   * @return FireElement
   */

	}, {
		key: "parent",
		value: function parent() {
			return this.__firejs.new(this.prop("parentNode"));
		}

		/**
   * Get the parents.
   * @param string query
   * @return FireElements
   */

	}, {
		key: "parents",
		value: function parents(query) {
			var list = new FireElements();
			var selectored = typeof query !== "undefined";

			var current = this;
			while (current.prop("parentElement")) {
				current = current.__firejs.new(current.prop("parentNode"));
				var node = current.node();
				if (selectored === false || node.matches && node.matches(query) || node.msMatchesSelector && node.msMatchesSelector(query)) {
					list.push(current);
				}
			}
			return list;
		}

		/**
   * Get the chidren.
   * @return FireElements
   */

	}, {
		key: "children",
		value: function children() {
			var list = new FireElements();
			var that = this;
			[].forEach.call(that.prop("children"), function (e) {
				list.push(that.__firejs.new(e));
			});
			return list;
		}

		/**
   * Get clone element.
   * @return FireElements
   */

	}, {
		key: "clone",
		value: function clone() {
			var clone = this.node().cloneNode(true);
			delete clone.firejs_id;
			return this.__firejs.new(clone);
		}

		/**
   * Remove children.
   * @return FireElements
   */

	}, {
		key: "empty",
		value: function empty() {
			var node = this.node();
			while (node.firstChild) {
				node.removeChild(node.firstChild);
			}
			return this;
		}

		/**
   * Remove selected elements.
   * @return null
   */

	}, {
		key: "remove",
		value: function remove() {
			this.node().remove();
			return null;
		}

		/**
   * Add element at the end.
   * @param e FireElement
   * @return FireElements
   */

	}, {
		key: "append",
		value: function append(e) {
			this.node().appendChild(e.clone().node());
			return this;
		}

		/**
   * Add element at the end.
   * @param e FireElement
   * @return FireElements
   */

	}, {
		key: "prepend",
		value: function prepend(e) {
			var children = this.children();
			var child = children.size() > 0 ? children.eq(0).node() : null;
			this.node().insertBefore(e.node(), child);
			return this;
		}

		/**
   * Set Text element.
   * @param string value
   * @return FireElements
   */

	}, {
		key: "text",
		value: function text(value) {
			if (typeof value !== "undefined") {
				this.node().textContent = value;
				return this;
			}
			return this.node().textContent;
		}

		/**
   * Get the next element.
   * @return FireElement
   */

	}, {
		key: "next",
		value: function next() {
			var el = this.prop("nextElementSibling");
			if (el) {
				return this.__firejs.new(el);
			} else {
				return null;
			}
		}

		/**
   * Get the previous element.
   * @return FireElement
   */

	}, {
		key: "prev",
		value: function prev() {
			var el = this.prop("previousElementSibling");
			if (el) {
				return this.__firejs.new(el);
			} else {
				return null;
			}
		}

		/**
   * Find elements in children nodes.
   * @param query string
   * @return FireElements
   */

	}, {
		key: "find",
		value: function find(query) {
			var list = new FireElements();
			var that = this;
			[].forEach.call(that.node().querySelectorAll(query), function (e) {
				var f = that.__firejs.new(e);
				list.push(f);
			});
			return list;
		}

		/**
   * Trigger a event.
   * @param event string
   * @param FireElements 
   */

	}, {
		key: "trigger",
		value: function trigger(event) {
			if (typeof this.prop(event) === "function") {
				this.prop(event).call(this.node());
			} else {
				var object = null;
				if (typeof CustomEvent !== "undefined") {
					object = new CustomEvent(event, { bubbles: true, cancelable: true });
				} else {
					object = document.createEvent('Event');
					object.initEvent(event, true, true);
				}
				this.node().dispatchEvent(object);
			}
			return this;
		}

		/**
   * Listen a event and execute the callback function when event triggering.
   * @param event string
   * @param callback Function
   * @return FireElement
   */

	}, {
		key: "on",
		value: function on(event, callback) {
			if (callback && typeof callback === "function") {
				var context = this;
				var handler = function handler(event) {
					if (callback.call(context, event, context) === false) {
						event.preventDefault();
					}
				};
				this.node().addEventListener(event, handler, false);
				if (!this.__handlers[event]) {
					this.__handlers[event] = [];
				}
				this.__handlers[event].push(handler);
			}
			return this;
		}

		/**
   * Unbind a event listener.
   * @param event string
   * @return FireElement
   */

	}, {
		key: "off",
		value: function off(event) {
			if (this.__handlers[event]) {
				for (var i = 0; i < this.__handlers[event].length; i++) {
					this.node().removeEventListener(event, this.__handlers[event][i], false);
					this.__handlers[event].splice(i--, 1);
				}
			}
			return this;
		}

		/**
   * Setter/getter of attribut the class.
   * @param name string
   * @param value string
   * @return FireElements
   */

	}, {
		key: "attr",
		value: function attr(name, value) {
			if (typeof value !== "undefined") {
				if (value === null) {
					this.node().removeAttribute(name);
				} else {
					this.node().setAttribute(name, value);
				}
				return this;
			}
			return this.node().getAttribute(name);
		}

		/**
   * Get value of attribut.
   * @param name string
   * @return FireElement
   */

	}, {
		key: "get",
		value: function get(name) {
			return this.node().getAttribute(name);
		}

		/**
   * Check if the element has the class.
   * @param name string
   * @return boolean
   */

	}, {
		key: "hasClass",
		value: function hasClass(name) {
			return this.node().classList.contains(name);
		}

		/**
   * Add the class.
   * @param name string
   * @return FireElement
   */

	}, {
		key: "addClass",
		value: function addClass(name) {
			if (name) {
				this.node().classList.add(name);
			}
			return this;
		}

		/**
   * Remove the class.
   * @param name string
   * @return FireElement
   */

	}, {
		key: "removeClass",
		value: function removeClass(name) {
			if (name) {
				this.node().classList.remove(name);
			}
			return this;
		}

		/**
   * Toggle the class.
   * @param name string
   * @return FireElement
   */

	}, {
		key: "toggleClass",
		value: function toggleClass(name) {
			if (name) {
				this.node().classList.toggle(name);
			}
			return this;
		}

		/**
   * Define CSS properties.
   * @param name string
   * @return FireElement
   */

	}, {
		key: "css",
		value: function css(name, value) {
			console.log(name, value);
			if (typeof name === "string") {
				this.node().style[name] = value;
			} else if ((typeof name === "undefined" ? "undefined" : _typeof(name)) === "object") {
				[].forEach.call(Object.keys(name), function (key) {
					this.node().style[key] = name[key];
				}, this);
			}
			return this;
		}

		/**
   * Define or get width element.
   * @param value number
   * @return number
   */

	}, {
		key: "width",
		value: function width(value) {
			if (value) {
				this.node().style.width = value + "px";
			}
			return this.node().offsetWidth;
		}

		/**
   * Define or get height element.
   * @param value number
   * @return number
   */

	}, {
		key: "height",
		value: function height(value) {
			if (value) {
				this.node().style.height = value + "px";
			}
			return this.node().offsetHeight;
		}

		/**
   * Get offset for top and left element in the page.
   * @return object {left, top}
   */

	}, {
		key: "offset",
		value: function offset() {
			var rect = this.node().getBoundingClientRect();
			return {
				top: rect.top + document.body.scrollTop,
				left: rect.left + document.body.scrollLeft
			};
		}

		/**
   * Show the element with its saved display property.
   * @return FireElement
   */

	}, {
		key: "show",
		value: function show() {
			if (this.__display === "none") {
				this.node().style.display = "block";
			} else {
				this.node().style.display = "";
			}
			this.__display_show = true;
			return this;
		}

		/**
   * Hide the element with display egals none.
   * @return FireElement
   */

	}, {
		key: "hide",
		value: function hide() {
			this.node().style.display = "none";
			this.__display_show = false;
			return this;
		}

		/**
   * Toggle the visibility of element.
   * @return FireElement
   */

	}, {
		key: "toggle",
		value: function toggle() {
			if (this.__display_show) {
				this.hide();
			} else {
				this.show();
			}
			return this;
		}

		/**
   * Get values of form elements.
   * @return string
   */

	}, {
		key: "val",
		value: function val(data) {
			if (this.node().type && this.node().type.toLowerCase() === "checkbox") {
				if (typeof data !== "undefined") {
					this.node().checked = data;
				}
				return this.node().checked;
			} else if (this.node().type && this.node().type.toLowerCase() === "radio") {
				if (typeof data !== "undefined") {
					this.node().checked = this.node().value == data;
				}
				return this.node().value;
			} else if (typeof this.node().value !== "undefined") {
				if (typeof data !== "undefined") {
					this.node().value = data;
				}
				return this.node().value;
			} else {
				return null;
			}
		}

		/**
   * Get contents of the element.
   * @return string
   */

	}, {
		key: "html",
		value: function html(content) {
			if (typeof content !== "undefined") {
				this.node().innerHTML = content;
			}
			return this.node().innerHTML;
		}

		/**
   * Return the node.
   * @return Node
   */

	}, {
		key: "node",
		value: function node() {
			return this.__element;
		}
	}]);

	return FireElement;
}();

var fire = new FireJS();